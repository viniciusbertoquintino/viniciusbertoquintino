#!/usr/bin/env python3
"""
Conversor de V√≠deo para MP3
Converte arquivos de v√≠deo para formato de √°udio MP3 usando moviepy
"""

import os
import sys
import argparse
from pathlib import Path
from moviepy.editor import VideoFileClip
import logging

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def convert_video_to_mp3(video_path, output_path=None, bitrate="192k"):
    """
    Converte um arquivo de v√≠deo para MP3
    
    Args:
        video_path (str): Caminho para o arquivo de v√≠deo
        output_path (str, optional): Caminho de sa√≠da. Se None, usa o mesmo nome do v√≠deo
        bitrate (str): Taxa de bits do MP3 (padr√£o: 192k)
    
    Returns:
        str: Caminho do arquivo MP3 criado
    """
    try:
        # Verificar se o arquivo de v√≠deo existe
        if not os.path.exists(video_path):
            raise FileNotFoundError(f"Arquivo de v√≠deo n√£o encontrado: {video_path}")
        
        # Definir caminho de sa√≠da se n√£o especificado
        if output_path is None:
            video_name = Path(video_path).stem
            output_path = f"{video_name}.mp3"
        
        logger.info(f"Iniciando convers√£o: {video_path} -> {output_path}")
        
        # Carregar o v√≠deo
        video = VideoFileClip(video_path)
        
        # Extrair √°udio e converter para MP3
        audio = video.audio
        audio.write_audiofile(
            output_path,
            bitrate=bitrate,
            verbose=False,
            logger=None
        )
        
        # Fechar os objetos para liberar mem√≥ria
        audio.close()
        video.close()
        
        logger.info(f"Convers√£o conclu√≠da com sucesso: {output_path}")
        return output_path
        
    except Exception as e:
        logger.error(f"Erro durante a convers√£o: {str(e)}")
        raise

def batch_convert(directory_path, output_dir=None, bitrate="192k"):
    """
    Converte todos os v√≠deos de um diret√≥rio para MP3
    
    Args:
        directory_path (str): Caminho do diret√≥rio com v√≠deos
        output_dir (str, optional): Diret√≥rio de sa√≠da. Se None, usa o mesmo diret√≥rio
        bitrate (str): Taxa de bits do MP3
    
    Returns:
        list: Lista de arquivos MP3 criados
    """
    if not os.path.exists(directory_path):
        raise FileNotFoundError(f"Diret√≥rio n√£o encontrado: {directory_path}")
    
    # Formatos de v√≠deo suportados
    video_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm', '.m4v']
    
    # Encontrar todos os arquivos de v√≠deo
    video_files = []
    for file in os.listdir(directory_path):
        if any(file.lower().endswith(ext) for ext in video_extensions):
            video_files.append(os.path.join(directory_path, file))
    
    if not video_files:
        logger.warning("Nenhum arquivo de v√≠deo encontrado no diret√≥rio")
        return []
    
    logger.info(f"Encontrados {len(video_files)} arquivos de v√≠deo para converter")
    
    # Criar diret√≥rio de sa√≠da se especificado
    if output_dir and not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    converted_files = []
    for video_file in video_files:
        try:
            # Definir caminho de sa√≠da
            if output_dir:
                filename = Path(video_file).stem + ".mp3"
                output_path = os.path.join(output_dir, filename)
            else:
                output_path = None
            
            # Converter
            mp3_file = convert_video_to_mp3(video_file, output_path, bitrate)
            converted_files.append(mp3_file)
            
        except Exception as e:
            logger.error(f"Erro ao converter {video_file}: {str(e)}")
            continue
    
    return converted_files

def main():
    """Fun√ß√£o principal com interface de linha de comando"""
    parser = argparse.ArgumentParser(
        description="Converte arquivos de v√≠deo para MP3",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python video_to_mp3.py video.mp4
  python video_to_mp3.py video.mp4 -o audio.mp3
  python video_to_mp3.py video.mp4 -b 320k
  python video_to_mp3.py -d /caminho/para/videos -o /caminho/saida
        """
    )
    
    # Argumentos
    parser.add_argument(
        'input',
        nargs='?',
        help='Arquivo de v√≠deo ou diret√≥rio para converter'
    )
    
    parser.add_argument(
        '-o', '--output',
        help='Arquivo ou diret√≥rio de sa√≠da'
    )
    
    parser.add_argument(
        '-d', '--directory',
        help='Converter todos os v√≠deos de um diret√≥rio'
    )
    
    parser.add_argument(
        '-b', '--bitrate',
        default='192k',
        help='Taxa de bits do MP3 (padr√£o: 192k)'
    )
    
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='Modo verboso'
    )
    
    args = parser.parse_args()
    
    # Configurar logging
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    try:
        if args.directory:
            # Convers√£o em lote
            converted_files = batch_convert(args.directory, args.output, args.bitrate)
            print(f"\n‚úÖ Convers√£o em lote conclu√≠da!")
            print(f"üìÅ {len(converted_files)} arquivos convertidos:")
            for file in converted_files:
                print(f"   ‚Ä¢ {file}")
                
        elif args.input:
            # Convers√£o de arquivo √∫nico
            mp3_file = convert_video_to_mp3(args.input, args.output, args.bitrate)
            print(f"\n‚úÖ Convers√£o conclu√≠da com sucesso!")
            print(f"üéµ Arquivo MP3 criado: {mp3_file}")
            
        else:
            parser.print_help()
            
    except KeyboardInterrupt:
        print("\n‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
