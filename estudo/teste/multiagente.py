import os                              
from dotenv import load_dotenv        
from agno.agent import Agent           
from agno.models.azure.openai_chat import AzureOpenAI
from textwrap import dedent


load_dotenv()

# Verifica se as vari√°veis necess√°rias est√£o configuradas
chat_model = AzureOpenAI(
        id=os.getenv("OPENAI_MODEL_NAME"),
        api_version=os.getenv("OPENAI_API_VERSION")
    ),


# O Redator √© respons√°vel por escrever o comunicado inicial

redator = Agent(
    # Nome do agente (para identifica√ß√£o)
    name="Redator",
    
    # Modelo de IA usando Azure OpenAI (configurado no .env)
    
    model= chat_model,
    
    # Papel do agente na equipe
    role="Especialista em reda√ß√£o de comunicados claros para clientes",
    
    # Instru√ß√µes detalhadas sobre como o agente deve agir
    instructions=dedent("""
        Voc√™ √© um redator de comunicados para atendimento ao cliente (CX).
        
        Sua miss√£o:
        - Escrever um comunicado CLARO sobre pol√≠tica de reembolsos
        - Usar linguagem SIMPLES e DIRETA
        - Incluir: prazos, condi√ß√µes e como solicitar
        - M√°ximo de 200 palavras
        
        Objetivo: Reduzir contatos do suporte N1 (perguntas repetitivas).
    """),
    
    
    markdown=True,
)


# O Cr√≠tico analisa o texto do Redator e aponta problemas

critico = Agent(
    name="Cr√≠tico",

   model= chat_model,

    role="Analista de qualidade que identifica inconsist√™ncias e problemas",
    
    instructions=dedent("""
        Voc√™ √© um cr√≠tico rigoroso de comunicados.
        
        Sua miss√£o:
        - Verificar CLAREZA: O texto √© f√°cil de entender?
        - Verificar COMPLETUDE: Faltam informa√ß√µes importantes?
        - Verificar AMBIGUIDADES: Algo pode ser mal interpretado?
        
        IMPORTANTE:
        - SEMPRE cite a FONTE dos problemas (qual frase/par√°grafo)
        - Use formato: "‚ùå Problema: [descri√ß√£o] | üìç Fonte: [trecho exato]"
        - Se estiver tudo OK, diga: "‚úÖ Aprovado sem ressalvas"
        
        Seja espec√≠fico e construtivo!
    """),
    
    
    markdown=True,
)



# O Editor produz a vers√£o final baseado no feedback do Cr√≠tico

editor = Agent(

    name="Editor",

    model= chat_model,

    role="Editor-chefe que produz a vers√£o final do comunicado",
    
    instructions=dedent("""
        Voc√™ √© o editor-chefe respons√°vel pela vers√£o final.
        
        Sua miss√£o:
        - Ler o texto do REDATOR
        - Ler as cr√≠ticas do CR√çTICO
        - Produzir vers√£o FINAL corrigindo todos os problemas apontados
        
        A vers√£o final deve:
        - Ser factual e consistente
        - Ter linguagem clara e profissional
        - N√£o ter ambiguidades
        - Incluir cabe√ßalho: "üì¢ COMUNICADO OFICIAL - POL√çTICA DE REEMBOLSOS"
        
        Formato de sa√≠da:
        1. Vers√£o final do comunicado
        2. Resumo das altera√ß√µes feitas
    """),
    
   
    markdown=True,
)



# Esta fun√ß√£o coordena os 3 agentes em sequ√™ncia

def executar_sistema_multiagentes():
    """
    Executa o fluxo completo do sistema multi-agentes.
    
    Fluxo:
    1. Redator escreve ‚Üí 2. Cr√≠tico analisa ‚Üí 3. Editor finaliza
    """
    
    print("=" * 80)
    print("üöÄ INICIANDO SISTEMA MULTI-AGENTES")
    print("=" * 80)
    print()
    
   
    print("üìù ETAPA 1: Redator escrevendo comunicado inicial...")
    print("-" * 80)
    
    # Cria a solicita√ß√£o (prompt) para o Redator
    solicitacao_inicial = """
    Escreva um comunicado claro sobre a pol√≠tica de reembolsos da empresa.
    
    Informa√ß√µes a incluir:
    - Prazo: 30 dias ap√≥s a compra
    - Condi√ß√£o: produto n√£o utilizado e na embalagem original
    - Como solicitar: atrav√©s do portal de atendimento ou email suporte@empresa.com
    - Tempo de processamento: at√© 10 dias √∫teis
    """
    
    # O Redator gera a resposta (comunicado inicial)
    resposta_redator = redator.run(solicitacao_inicial)
    texto_inicial = resposta_redator.content
    
    print(texto_inicial)
    print()
    
    
    print("üîç ETAPA 2: Cr√≠tico analisando o comunicado...")
    print("-" * 80)
    
    # O Cr√≠tico recebe o texto do Redator e analisa
    solicitacao_critica = f"""
    Analise este comunicado sobre reembolsos:
    
    {texto_inicial}
    
    Identifique problemas de clareza, completude ou ambiguidade.
    Cite a fonte espec√≠fica de cada problema.
    """
    
    resposta_critico = critico.run(solicitacao_critica)
    analise_critica = resposta_critico.content
    
    print(analise_critica)
    print()
    
    print("‚úçÔ∏è ETAPA 3: Editor produzindo vers√£o final...")
    print("-" * 80)
    
    # Aqui o Editor recebe TANTO o texto inicial QUANTO as cr√≠ticas
    solicitacao_final = f"""
    Produza a vers√£o final do comunicado considerando:
    
    TEXTO ORIGINAL DO REDATOR:
    {texto_inicial}
    
    AN√ÅLISE DO CR√çTICO:
    {analise_critica}
    
    Corrija todos os problemas apontados e entregue a vers√£o final.
    """
    
    resposta_editor = editor.run(solicitacao_final)
    versao_final = resposta_editor.content
    
    print(versao_final)
    print()
    
    # FIM
    
    print("=" * 80)
    print("‚úÖ SISTEMA MULTI-AGENTES CONCLU√çDO COM SUCESSO!")
    print("=" * 80)



if __name__ == "__main__":
    # Executa a fun√ß√£o principal
    executar_sistema_multiagentes()


